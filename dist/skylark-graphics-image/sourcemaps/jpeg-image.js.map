{"version":3,"sources":["jpeg-image.js"],"names":["define","BaseException","binary","jpeg","JpegError","[object Object]","msg","super","DNLMarkerError","message","scanLines","this","EOIMarkerError","dctZigZag","Uint8Array","dctCos1","dctSin1","dctCos3","dctSin3","dctCos6","dctSin6","dctSqrt2","dctSqrt1d2","JpegImage","decodeTransform","colorTransform","_decodeTransform","_colorTransform","buildHuffmanTable","codeLengths","values","i","j","k","code","length","push","children","index","q","p","pop","getBlockBufferOffset","component","row","col","blocksPerLine","decodeScan","data","offset","frame","components","resetInterval","spectralStart","spectralEnd","successivePrev","successive","parseDNLMarker","mcusPerLine","progressive","startOffset","bitsData","bitsCount","readBit","nextByte","readUint16","maybeScanLines","blockRow","precision","Math","round","toString","decodeHuffman","tree","node","receive","n","receiveAndExtend","eobrun","successiveACNextValue","successiveACState","decodeMcu","decode","mcu","mcuCol","v","blockCol","h","decodeBlock","decodeFn","componentsLength","blockOffset","t","huffmanTableDC","diff","blockData","pred","e","rs","huffmanTableAC","s","r","z","offsetZ","sign","fileMarker","mcuExpected","blocksPerColumn","mcusPerColumn","mcuToRead","min","findNextFileMarker","invalid","partialMsg","sutil","warn","marker","quantizeAndInverse","blockBufferOffset","v0","v1","v2","v3","v4","v5","v6","v7","p0","p1","p2","p3","p4","p5","p6","p7","qt","quantizationTable","buildComponentData","computationBuffer","Int16Array","currentPos","startPos","maxPos","newPos","currentMarker","newMarker","prototype","dnlScanLines","readDataBlock","endOffset","array","subarray","prepareComponents","ceil","samplesPerLine","maxH","maxV","blocksPerLineForMcu","blocksBufferSize","jfif","adobe","numSOSMarkers","quantizationTables","huffmanTablesAC","huffmanTablesDC","markerLoop","l","appData","version","major","minor","densityUnits","xDensity","yDensity","thumbWidth","thumbHeight","thumbData","flags0","flags1","transformCode","quantizationTablesEnd","quantizationTableSpec","tableData","Uint16Array","extended","sofScanLines","componentIds","componentId","componentsCount","qId","quantizationId","huffmanLength","huffmanTableSpec","codeLengthSum","huffmanValues","selectorsCount","componentIndex","tableSpec","successiveApproximation","processed","ex","parse","nextFileMarker","width","height","output","scaleX","scaleY","numComponents","isSourcePDF","componentScaleX","componentScaleY","blocksPerScanline","x","y","dataLength","Uint8ClampedArray","xScaleBlockOffset","Uint32Array","lastComponentScaleX","transform","Int32Array","_isColorConversionNeeded","_convertYccToRgb","Y","Cb","Cr","_convertYcckToRgb","_convertYcckToCmyk","_convertCmykToRgb","c","m","forceRGB","PDFJSDev","test","assert","_getLinearizedBlockData","rgbData","grayColor"],"mappings":"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","file":"../jpeg-image.js","sourcesContent":["define([\r\n    \"skylark-langx-exceptions/base-exception\",\r\n    'skylark-langx-binary',\r\n    \"./jpeg\"\r\n], function (BaseException, binary,jpeg) {\r\n    'use strict';\r\n    class JpegError extends BaseException {\r\n        constructor(msg) {\r\n            super(`JPEG error: ${ msg }`);\r\n        }\r\n    }\r\n    class DNLMarkerError extends BaseException {\r\n        constructor(message, scanLines) {\r\n            super(message);\r\n            this.scanLines = scanLines;\r\n        }\r\n    }\r\n    class EOIMarkerError extends BaseException {\r\n    }\r\n\r\n    var dctZigZag = new Uint8Array([\r\n        0,\r\n        1,\r\n        8,\r\n        16,\r\n        9,\r\n        2,\r\n        3,\r\n        10,\r\n        17,\r\n        24,\r\n        32,\r\n        25,\r\n        18,\r\n        11,\r\n        4,\r\n        5,\r\n        12,\r\n        19,\r\n        26,\r\n        33,\r\n        40,\r\n        48,\r\n        41,\r\n        34,\r\n        27,\r\n        20,\r\n        13,\r\n        6,\r\n        7,\r\n        14,\r\n        21,\r\n        28,\r\n        35,\r\n        42,\r\n        49,\r\n        56,\r\n        57,\r\n        50,\r\n        43,\r\n        36,\r\n        29,\r\n        22,\r\n        15,\r\n        23,\r\n        30,\r\n        37,\r\n        44,\r\n        51,\r\n        58,\r\n        59,\r\n        52,\r\n        45,\r\n        38,\r\n        31,\r\n        39,\r\n        46,\r\n        53,\r\n        60,\r\n        61,\r\n        54,\r\n        47,\r\n        55,\r\n        62,\r\n        63\r\n    ]);\r\n    var dctCos1 = 4017;\r\n    var dctSin1 = 799;\r\n    var dctCos3 = 3406;\r\n    var dctSin3 = 2276;\r\n    var dctCos6 = 1567;\r\n    var dctSin6 = 3784;\r\n    var dctSqrt2 = 5793;\r\n    var dctSqrt1d2 = 2896;\r\n    function JpegImage({decodeTransform = null, colorTransform = -1} = {}) {\r\n        this._decodeTransform = decodeTransform;\r\n        this._colorTransform = colorTransform;\r\n    }\r\n    function buildHuffmanTable(codeLengths, values) {\r\n        var k = 0, code = [], i, j, length = 16;\r\n        while (length > 0 && !codeLengths[length - 1]) {\r\n            length--;\r\n        }\r\n        code.push({\r\n            children: [],\r\n            index: 0\r\n        });\r\n        var p = code[0], q;\r\n        for (i = 0; i < length; i++) {\r\n            for (j = 0; j < codeLengths[i]; j++) {\r\n                p = code.pop();\r\n                p.children[p.index] = values[k];\r\n                while (p.index > 0) {\r\n                    p = code.pop();\r\n                }\r\n                p.index++;\r\n                code.push(p);\r\n                while (code.length <= i) {\r\n                    code.push(q = {\r\n                        children: [],\r\n                        index: 0\r\n                    });\r\n                    p.children[p.index] = q.children;\r\n                    p = q;\r\n                }\r\n                k++;\r\n            }\r\n            if (i + 1 < length) {\r\n                code.push(q = {\r\n                    children: [],\r\n                    index: 0\r\n                });\r\n                p.children[p.index] = q.children;\r\n                p = q;\r\n            }\r\n        }\r\n        return code[0].children;\r\n    }\r\n    function getBlockBufferOffset(component, row, col) {\r\n        return 64 * ((component.blocksPerLine + 1) * row + col);\r\n    }\r\n    function decodeScan(data, offset, frame, components, resetInterval, spectralStart, spectralEnd, successivePrev, successive, parseDNLMarker = false) {\r\n        var mcusPerLine = frame.mcusPerLine;\r\n        var progressive = frame.progressive;\r\n        const startOffset = offset;\r\n        let bitsData = 0, bitsCount = 0;\r\n        function readBit() {\r\n            if (bitsCount > 0) {\r\n                bitsCount--;\r\n                return bitsData >> bitsCount & 1;\r\n            }\r\n            bitsData = data[offset++];\r\n            if (bitsData === 255) {\r\n                var nextByte = data[offset++];\r\n                if (nextByte) {\r\n                    if (nextByte === 220 && parseDNLMarker) {\r\n                        offset += 2;\r\n                        const scanLines = binary.readUint16(data, offset);\r\n                        offset += 2;\r\n                        if (scanLines > 0 && scanLines !== frame.scanLines) {\r\n                            throw new DNLMarkerError('Found DNL marker (0xFFDC) while parsing scan data', scanLines);\r\n                        }\r\n                    } else if (nextByte === 217) {\r\n                        if (parseDNLMarker) {\r\n                            const maybeScanLines = blockRow * (frame.precision === 8 ? 8 : 0);\r\n                            if (maybeScanLines > 0 && Math.round(frame.scanLines / maybeScanLines) >= 10) {\r\n                                throw new DNLMarkerError('Found EOI marker (0xFFD9) while parsing scan data, ' + 'possibly caused by incorrect `scanLines` parameter', maybeScanLines);\r\n                            }\r\n                        }\r\n                        throw new EOIMarkerError('Found EOI marker (0xFFD9) while parsing scan data');\r\n                    }\r\n                    throw new JpegError(`unexpected marker ${ (bitsData << 8 | nextByte).toString(16) }`);\r\n                }\r\n            }\r\n            bitsCount = 7;\r\n            return bitsData >>> 7;\r\n        }\r\n        function decodeHuffman(tree) {\r\n            var node = tree;\r\n            while (true) {\r\n                node = node[readBit()];\r\n                switch (typeof node) {\r\n                case 'number':\r\n                    return node;\r\n                case 'object':\r\n                    continue;\r\n                }\r\n                throw new JpegError('invalid huffman sequence');\r\n            }\r\n        }\r\n        function receive(length) {\r\n            var n = 0;\r\n            while (length > 0) {\r\n                n = n << 1 | readBit();\r\n                length--;\r\n            }\r\n            return n;\r\n        }\r\n        function receiveAndExtend(length) {\r\n            if (length === 1) {\r\n                return readBit() === 1 ? 1 : -1;\r\n            }\r\n            var n = receive(length);\r\n            if (n >= 1 << length - 1) {\r\n                return n;\r\n            }\r\n            return n + (-1 << length) + 1;\r\n        }\r\n        function decodeBaseline(component, blockOffset) {\r\n            var t = decodeHuffman(component.huffmanTableDC);\r\n            var diff = t === 0 ? 0 : receiveAndExtend(t);\r\n            component.blockData[blockOffset] = component.pred += diff;\r\n            var k = 1;\r\n            while (k < 64) {\r\n                var rs = decodeHuffman(component.huffmanTableAC);\r\n                var s = rs & 15, r = rs >> 4;\r\n                if (s === 0) {\r\n                    if (r < 15) {\r\n                        break;\r\n                    }\r\n                    k += 16;\r\n                    continue;\r\n                }\r\n                k += r;\r\n                var z = dctZigZag[k];\r\n                component.blockData[blockOffset + z] = receiveAndExtend(s);\r\n                k++;\r\n            }\r\n        }\r\n        function decodeDCFirst(component, blockOffset) {\r\n            var t = decodeHuffman(component.huffmanTableDC);\r\n            var diff = t === 0 ? 0 : receiveAndExtend(t) << successive;\r\n            component.blockData[blockOffset] = component.pred += diff;\r\n        }\r\n        function decodeDCSuccessive(component, blockOffset) {\r\n            component.blockData[blockOffset] |= readBit() << successive;\r\n        }\r\n        var eobrun = 0;\r\n        function decodeACFirst(component, blockOffset) {\r\n            if (eobrun > 0) {\r\n                eobrun--;\r\n                return;\r\n            }\r\n            var k = spectralStart, e = spectralEnd;\r\n            while (k <= e) {\r\n                var rs = decodeHuffman(component.huffmanTableAC);\r\n                var s = rs & 15, r = rs >> 4;\r\n                if (s === 0) {\r\n                    if (r < 15) {\r\n                        eobrun = receive(r) + (1 << r) - 1;\r\n                        break;\r\n                    }\r\n                    k += 16;\r\n                    continue;\r\n                }\r\n                k += r;\r\n                var z = dctZigZag[k];\r\n                component.blockData[blockOffset + z] = receiveAndExtend(s) * (1 << successive);\r\n                k++;\r\n            }\r\n        }\r\n        var successiveACState = 0, successiveACNextValue;\r\n        function decodeACSuccessive(component, blockOffset) {\r\n            var k = spectralStart;\r\n            var e = spectralEnd;\r\n            var r = 0;\r\n            var s;\r\n            var rs;\r\n            while (k <= e) {\r\n                const offsetZ = blockOffset + dctZigZag[k];\r\n                const sign = component.blockData[offsetZ] < 0 ? -1 : 1;\r\n                switch (successiveACState) {\r\n                case 0:\r\n                    rs = decodeHuffman(component.huffmanTableAC);\r\n                    s = rs & 15;\r\n                    r = rs >> 4;\r\n                    if (s === 0) {\r\n                        if (r < 15) {\r\n                            eobrun = receive(r) + (1 << r);\r\n                            successiveACState = 4;\r\n                        } else {\r\n                            r = 16;\r\n                            successiveACState = 1;\r\n                        }\r\n                    } else {\r\n                        if (s !== 1) {\r\n                            throw new JpegError('invalid ACn encoding');\r\n                        }\r\n                        successiveACNextValue = receiveAndExtend(s);\r\n                        successiveACState = r ? 2 : 3;\r\n                    }\r\n                    continue;\r\n                case 1:\r\n                case 2:\r\n                    if (component.blockData[offsetZ]) {\r\n                        component.blockData[offsetZ] += sign * (readBit() << successive);\r\n                    } else {\r\n                        r--;\r\n                        if (r === 0) {\r\n                            successiveACState = successiveACState === 2 ? 3 : 0;\r\n                        }\r\n                    }\r\n                    break;\r\n                case 3:\r\n                    if (component.blockData[offsetZ]) {\r\n                        component.blockData[offsetZ] += sign * (readBit() << successive);\r\n                    } else {\r\n                        component.blockData[offsetZ] = successiveACNextValue << successive;\r\n                        successiveACState = 0;\r\n                    }\r\n                    break;\r\n                case 4:\r\n                    if (component.blockData[offsetZ]) {\r\n                        component.blockData[offsetZ] += sign * (readBit() << successive);\r\n                    }\r\n                    break;\r\n                }\r\n                k++;\r\n            }\r\n            if (successiveACState === 4) {\r\n                eobrun--;\r\n                if (eobrun === 0) {\r\n                    successiveACState = 0;\r\n                }\r\n            }\r\n        }\r\n        let blockRow = 0;\r\n        function decodeMcu(component, decode, mcu, row, col) {\r\n            var mcuRow = mcu / mcusPerLine | 0;\r\n            var mcuCol = mcu % mcusPerLine;\r\n            blockRow = mcuRow * component.v + row;\r\n            var blockCol = mcuCol * component.h + col;\r\n            const blockOffset = getBlockBufferOffset(component, blockRow, blockCol);\r\n            decode(component, blockOffset);\r\n        }\r\n        function decodeBlock(component, decode, mcu) {\r\n            blockRow = mcu / component.blocksPerLine | 0;\r\n            var blockCol = mcu % component.blocksPerLine;\r\n            const blockOffset = getBlockBufferOffset(component, blockRow, blockCol);\r\n            decode(component, blockOffset);\r\n        }\r\n        var componentsLength = components.length;\r\n        var component, i, j, k, n;\r\n        var decodeFn;\r\n        if (progressive) {\r\n            if (spectralStart === 0) {\r\n                decodeFn = successivePrev === 0 ? decodeDCFirst : decodeDCSuccessive;\r\n            } else {\r\n                decodeFn = successivePrev === 0 ? decodeACFirst : decodeACSuccessive;\r\n            }\r\n        } else {\r\n            decodeFn = decodeBaseline;\r\n        }\r\n        var mcu = 0, fileMarker;\r\n        var mcuExpected;\r\n        if (componentsLength === 1) {\r\n            mcuExpected = components[0].blocksPerLine * components[0].blocksPerColumn;\r\n        } else {\r\n            mcuExpected = mcusPerLine * frame.mcusPerColumn;\r\n        }\r\n        var h, v;\r\n        while (mcu <= mcuExpected) {\r\n            var mcuToRead = resetInterval ? Math.min(mcuExpected - mcu, resetInterval) : mcuExpected;\r\n            if (mcuToRead > 0) {\r\n                for (i = 0; i < componentsLength; i++) {\r\n                    components[i].pred = 0;\r\n                }\r\n                eobrun = 0;\r\n                if (componentsLength === 1) {\r\n                    component = components[0];\r\n                    for (n = 0; n < mcuToRead; n++) {\r\n                        decodeBlock(component, decodeFn, mcu);\r\n                        mcu++;\r\n                    }\r\n                } else {\r\n                    for (n = 0; n < mcuToRead; n++) {\r\n                        for (i = 0; i < componentsLength; i++) {\r\n                            component = components[i];\r\n                            h = component.h;\r\n                            v = component.v;\r\n                            for (j = 0; j < v; j++) {\r\n                                for (k = 0; k < h; k++) {\r\n                                    decodeMcu(component, decodeFn, mcu, j, k);\r\n                                }\r\n                            }\r\n                        }\r\n                        mcu++;\r\n                    }\r\n                }\r\n            }\r\n            bitsCount = 0;\r\n            fileMarker = findNextFileMarker(data, offset);\r\n            if (!fileMarker) {\r\n                break;\r\n            }\r\n            if (fileMarker.invalid) {\r\n                const partialMsg = mcuToRead > 0 ? 'unexpected' : 'excessive';\r\n                sutil.warn(`decodeScan - ${ partialMsg } MCU data, current marker is: ${ fileMarker.invalid }`);\r\n                offset = fileMarker.offset;\r\n            }\r\n            if (fileMarker.marker >= 65488 && fileMarker.marker <= 65495) {\r\n                offset += 2;\r\n            } else {\r\n                break;\r\n            }\r\n        }\r\n        return offset - startOffset;\r\n    }\r\n    function quantizeAndInverse(component, blockBufferOffset, p) {\r\n        var qt = component.quantizationTable, blockData = component.blockData;\r\n        var v0, v1, v2, v3, v4, v5, v6, v7;\r\n        var p0, p1, p2, p3, p4, p5, p6, p7;\r\n        var t;\r\n        if (!qt) {\r\n            throw new JpegError('missing required Quantization Table.');\r\n        }\r\n        for (var row = 0; row < 64; row += 8) {\r\n            p0 = blockData[blockBufferOffset + row];\r\n            p1 = blockData[blockBufferOffset + row + 1];\r\n            p2 = blockData[blockBufferOffset + row + 2];\r\n            p3 = blockData[blockBufferOffset + row + 3];\r\n            p4 = blockData[blockBufferOffset + row + 4];\r\n            p5 = blockData[blockBufferOffset + row + 5];\r\n            p6 = blockData[blockBufferOffset + row + 6];\r\n            p7 = blockData[blockBufferOffset + row + 7];\r\n            p0 *= qt[row];\r\n            if ((p1 | p2 | p3 | p4 | p5 | p6 | p7) === 0) {\r\n                t = dctSqrt2 * p0 + 512 >> 10;\r\n                p[row] = t;\r\n                p[row + 1] = t;\r\n                p[row + 2] = t;\r\n                p[row + 3] = t;\r\n                p[row + 4] = t;\r\n                p[row + 5] = t;\r\n                p[row + 6] = t;\r\n                p[row + 7] = t;\r\n                continue;\r\n            }\r\n            p1 *= qt[row + 1];\r\n            p2 *= qt[row + 2];\r\n            p3 *= qt[row + 3];\r\n            p4 *= qt[row + 4];\r\n            p5 *= qt[row + 5];\r\n            p6 *= qt[row + 6];\r\n            p7 *= qt[row + 7];\r\n            v0 = dctSqrt2 * p0 + 128 >> 8;\r\n            v1 = dctSqrt2 * p4 + 128 >> 8;\r\n            v2 = p2;\r\n            v3 = p6;\r\n            v4 = dctSqrt1d2 * (p1 - p7) + 128 >> 8;\r\n            v7 = dctSqrt1d2 * (p1 + p7) + 128 >> 8;\r\n            v5 = p3 << 4;\r\n            v6 = p5 << 4;\r\n            v0 = v0 + v1 + 1 >> 1;\r\n            v1 = v0 - v1;\r\n            t = v2 * dctSin6 + v3 * dctCos6 + 128 >> 8;\r\n            v2 = v2 * dctCos6 - v3 * dctSin6 + 128 >> 8;\r\n            v3 = t;\r\n            v4 = v4 + v6 + 1 >> 1;\r\n            v6 = v4 - v6;\r\n            v7 = v7 + v5 + 1 >> 1;\r\n            v5 = v7 - v5;\r\n            v0 = v0 + v3 + 1 >> 1;\r\n            v3 = v0 - v3;\r\n            v1 = v1 + v2 + 1 >> 1;\r\n            v2 = v1 - v2;\r\n            t = v4 * dctSin3 + v7 * dctCos3 + 2048 >> 12;\r\n            v4 = v4 * dctCos3 - v7 * dctSin3 + 2048 >> 12;\r\n            v7 = t;\r\n            t = v5 * dctSin1 + v6 * dctCos1 + 2048 >> 12;\r\n            v5 = v5 * dctCos1 - v6 * dctSin1 + 2048 >> 12;\r\n            v6 = t;\r\n            p[row] = v0 + v7;\r\n            p[row + 7] = v0 - v7;\r\n            p[row + 1] = v1 + v6;\r\n            p[row + 6] = v1 - v6;\r\n            p[row + 2] = v2 + v5;\r\n            p[row + 5] = v2 - v5;\r\n            p[row + 3] = v3 + v4;\r\n            p[row + 4] = v3 - v4;\r\n        }\r\n        for (var col = 0; col < 8; ++col) {\r\n            p0 = p[col];\r\n            p1 = p[col + 8];\r\n            p2 = p[col + 16];\r\n            p3 = p[col + 24];\r\n            p4 = p[col + 32];\r\n            p5 = p[col + 40];\r\n            p6 = p[col + 48];\r\n            p7 = p[col + 56];\r\n            if ((p1 | p2 | p3 | p4 | p5 | p6 | p7) === 0) {\r\n                t = dctSqrt2 * p0 + 8192 >> 14;\r\n                if (t < -2040) {\r\n                    t = 0;\r\n                } else if (t >= 2024) {\r\n                    t = 255;\r\n                } else {\r\n                    t = t + 2056 >> 4;\r\n                }\r\n                blockData[blockBufferOffset + col] = t;\r\n                blockData[blockBufferOffset + col + 8] = t;\r\n                blockData[blockBufferOffset + col + 16] = t;\r\n                blockData[blockBufferOffset + col + 24] = t;\r\n                blockData[blockBufferOffset + col + 32] = t;\r\n                blockData[blockBufferOffset + col + 40] = t;\r\n                blockData[blockBufferOffset + col + 48] = t;\r\n                blockData[blockBufferOffset + col + 56] = t;\r\n                continue;\r\n            }\r\n            v0 = dctSqrt2 * p0 + 2048 >> 12;\r\n            v1 = dctSqrt2 * p4 + 2048 >> 12;\r\n            v2 = p2;\r\n            v3 = p6;\r\n            v4 = dctSqrt1d2 * (p1 - p7) + 2048 >> 12;\r\n            v7 = dctSqrt1d2 * (p1 + p7) + 2048 >> 12;\r\n            v5 = p3;\r\n            v6 = p5;\r\n            v0 = (v0 + v1 + 1 >> 1) + 4112;\r\n            v1 = v0 - v1;\r\n            t = v2 * dctSin6 + v3 * dctCos6 + 2048 >> 12;\r\n            v2 = v2 * dctCos6 - v3 * dctSin6 + 2048 >> 12;\r\n            v3 = t;\r\n            v4 = v4 + v6 + 1 >> 1;\r\n            v6 = v4 - v6;\r\n            v7 = v7 + v5 + 1 >> 1;\r\n            v5 = v7 - v5;\r\n            v0 = v0 + v3 + 1 >> 1;\r\n            v3 = v0 - v3;\r\n            v1 = v1 + v2 + 1 >> 1;\r\n            v2 = v1 - v2;\r\n            t = v4 * dctSin3 + v7 * dctCos3 + 2048 >> 12;\r\n            v4 = v4 * dctCos3 - v7 * dctSin3 + 2048 >> 12;\r\n            v7 = t;\r\n            t = v5 * dctSin1 + v6 * dctCos1 + 2048 >> 12;\r\n            v5 = v5 * dctCos1 - v6 * dctSin1 + 2048 >> 12;\r\n            v6 = t;\r\n            p0 = v0 + v7;\r\n            p7 = v0 - v7;\r\n            p1 = v1 + v6;\r\n            p6 = v1 - v6;\r\n            p2 = v2 + v5;\r\n            p5 = v2 - v5;\r\n            p3 = v3 + v4;\r\n            p4 = v3 - v4;\r\n            if (p0 < 16) {\r\n                p0 = 0;\r\n            } else if (p0 >= 4080) {\r\n                p0 = 255;\r\n            } else {\r\n                p0 >>= 4;\r\n            }\r\n            if (p1 < 16) {\r\n                p1 = 0;\r\n            } else if (p1 >= 4080) {\r\n                p1 = 255;\r\n            } else {\r\n                p1 >>= 4;\r\n            }\r\n            if (p2 < 16) {\r\n                p2 = 0;\r\n            } else if (p2 >= 4080) {\r\n                p2 = 255;\r\n            } else {\r\n                p2 >>= 4;\r\n            }\r\n            if (p3 < 16) {\r\n                p3 = 0;\r\n            } else if (p3 >= 4080) {\r\n                p3 = 255;\r\n            } else {\r\n                p3 >>= 4;\r\n            }\r\n            if (p4 < 16) {\r\n                p4 = 0;\r\n            } else if (p4 >= 4080) {\r\n                p4 = 255;\r\n            } else {\r\n                p4 >>= 4;\r\n            }\r\n            if (p5 < 16) {\r\n                p5 = 0;\r\n            } else if (p5 >= 4080) {\r\n                p5 = 255;\r\n            } else {\r\n                p5 >>= 4;\r\n            }\r\n            if (p6 < 16) {\r\n                p6 = 0;\r\n            } else if (p6 >= 4080) {\r\n                p6 = 255;\r\n            } else {\r\n                p6 >>= 4;\r\n            }\r\n            if (p7 < 16) {\r\n                p7 = 0;\r\n            } else if (p7 >= 4080) {\r\n                p7 = 255;\r\n            } else {\r\n                p7 >>= 4;\r\n            }\r\n            blockData[blockBufferOffset + col] = p0;\r\n            blockData[blockBufferOffset + col + 8] = p1;\r\n            blockData[blockBufferOffset + col + 16] = p2;\r\n            blockData[blockBufferOffset + col + 24] = p3;\r\n            blockData[blockBufferOffset + col + 32] = p4;\r\n            blockData[blockBufferOffset + col + 40] = p5;\r\n            blockData[blockBufferOffset + col + 48] = p6;\r\n            blockData[blockBufferOffset + col + 56] = p7;\r\n        }\r\n    }\r\n    function buildComponentData(frame, component) {\r\n        var blocksPerLine = component.blocksPerLine;\r\n        var blocksPerColumn = component.blocksPerColumn;\r\n        var computationBuffer = new Int16Array(64);\r\n        for (var blockRow = 0; blockRow < blocksPerColumn; blockRow++) {\r\n            for (var blockCol = 0; blockCol < blocksPerLine; blockCol++) {\r\n                var offset = getBlockBufferOffset(component, blockRow, blockCol);\r\n                quantizeAndInverse(component, offset, computationBuffer);\r\n            }\r\n        }\r\n        return component.blockData;\r\n    }\r\n    function findNextFileMarker(data, currentPos, startPos = currentPos) {\r\n        const maxPos = data.length - 1;\r\n        var newPos = startPos < currentPos ? startPos : currentPos;\r\n        if (currentPos >= maxPos) {\r\n            return null;\r\n        }\r\n        var currentMarker = binary.readUint16(data, currentPos);\r\n        if (currentMarker >= 65472 && currentMarker <= 65534) {\r\n            return {\r\n                invalid: null,\r\n                marker: currentMarker,\r\n                offset: currentPos\r\n            };\r\n        }\r\n        var newMarker = binary.readUint16(data, newPos);\r\n        while (!(newMarker >= 65472 && newMarker <= 65534)) {\r\n            if (++newPos >= maxPos) {\r\n                return null;\r\n            }\r\n            newMarker = binary.readUint16(data, newPos);\r\n        }\r\n        return {\r\n            invalid: currentMarker.toString(16),\r\n            marker: newMarker,\r\n            offset: newPos\r\n        };\r\n    }\r\n    JpegImage.prototype = {\r\n        parse(data, {\r\n            dnlScanLines = null\r\n        } = {}) {\r\n            function readDataBlock() {\r\n                const length = binary.readUint16(data, offset);\r\n                offset += 2;\r\n                let endOffset = offset + length - 2;\r\n                var fileMarker = findNextFileMarker(data, endOffset, offset);\r\n                if (fileMarker && fileMarker.invalid) {\r\n                    sutil.warn('readDataBlock - incorrect length, current marker is: ' + fileMarker.invalid);\r\n                    endOffset = fileMarker.offset;\r\n                }\r\n                var array = data.subarray(offset, endOffset);\r\n                offset += array.length;\r\n                return array;\r\n            }\r\n            function prepareComponents(frame) {\r\n                var mcusPerLine = Math.ceil(frame.samplesPerLine / 8 / frame.maxH);\r\n                var mcusPerColumn = Math.ceil(frame.scanLines / 8 / frame.maxV);\r\n                for (var i = 0; i < frame.components.length; i++) {\r\n                    component = frame.components[i];\r\n                    var blocksPerLine = Math.ceil(Math.ceil(frame.samplesPerLine / 8) * component.h / frame.maxH);\r\n                    var blocksPerColumn = Math.ceil(Math.ceil(frame.scanLines / 8) * component.v / frame.maxV);\r\n                    var blocksPerLineForMcu = mcusPerLine * component.h;\r\n                    var blocksPerColumnForMcu = mcusPerColumn * component.v;\r\n                    var blocksBufferSize = 64 * blocksPerColumnForMcu * (blocksPerLineForMcu + 1);\r\n                    component.blockData = new Int16Array(blocksBufferSize);\r\n                    component.blocksPerLine = blocksPerLine;\r\n                    component.blocksPerColumn = blocksPerColumn;\r\n                }\r\n                frame.mcusPerLine = mcusPerLine;\r\n                frame.mcusPerColumn = mcusPerColumn;\r\n            }\r\n            var offset = 0;\r\n            var jfif = null;\r\n            var adobe = null;\r\n            var frame, resetInterval;\r\n            let numSOSMarkers = 0;\r\n            var quantizationTables = [];\r\n            var huffmanTablesAC = [], huffmanTablesDC = [];\r\n            let fileMarker = binary.readUint16(data, offset);\r\n            offset += 2;\r\n            if (fileMarker !== 65496) {\r\n                throw new JpegError('SOI not found');\r\n            }\r\n            fileMarker = binary.readUint16(data, offset);\r\n            offset += 2;\r\n            markerLoop:\r\n                while (fileMarker !== 65497) {\r\n                    var i, j, l;\r\n                    switch (fileMarker) {\r\n                    case 65504:\r\n                    case 65505:\r\n                    case 65506:\r\n                    case 65507:\r\n                    case 65508:\r\n                    case 65509:\r\n                    case 65510:\r\n                    case 65511:\r\n                    case 65512:\r\n                    case 65513:\r\n                    case 65514:\r\n                    case 65515:\r\n                    case 65516:\r\n                    case 65517:\r\n                    case 65518:\r\n                    case 65519:\r\n                    case 65534:\r\n                        var appData = readDataBlock();\r\n                        if (fileMarker === 65504) {\r\n                            if (appData[0] === 74 && appData[1] === 70 && appData[2] === 73 && appData[3] === 70 && appData[4] === 0) {\r\n                                jfif = {\r\n                                    version: {\r\n                                        major: appData[5],\r\n                                        minor: appData[6]\r\n                                    },\r\n                                    densityUnits: appData[7],\r\n                                    xDensity: appData[8] << 8 | appData[9],\r\n                                    yDensity: appData[10] << 8 | appData[11],\r\n                                    thumbWidth: appData[12],\r\n                                    thumbHeight: appData[13],\r\n                                    thumbData: appData.subarray(14, 14 + 3 * appData[12] * appData[13])\r\n                                };\r\n                            }\r\n                        }\r\n                        if (fileMarker === 65518) {\r\n                            if (appData[0] === 65 && appData[1] === 100 && appData[2] === 111 && appData[3] === 98 && appData[4] === 101) {\r\n                                adobe = {\r\n                                    version: appData[5] << 8 | appData[6],\r\n                                    flags0: appData[7] << 8 | appData[8],\r\n                                    flags1: appData[9] << 8 | appData[10],\r\n                                    transformCode: appData[11]\r\n                                };\r\n                            }\r\n                        }\r\n                        break;\r\n                    case 65499:\r\n                        const quantizationTablesLength = binary.readUint16(data, offset);\r\n                        offset += 2;\r\n                        var quantizationTablesEnd = quantizationTablesLength + offset - 2;\r\n                        var z;\r\n                        while (offset < quantizationTablesEnd) {\r\n                            var quantizationTableSpec = data[offset++];\r\n                            var tableData = new Uint16Array(64);\r\n                            if (quantizationTableSpec >> 4 === 0) {\r\n                                for (j = 0; j < 64; j++) {\r\n                                    z = dctZigZag[j];\r\n                                    tableData[z] = data[offset++];\r\n                                }\r\n                            } else if (quantizationTableSpec >> 4 === 1) {\r\n                                for (j = 0; j < 64; j++) {\r\n                                    z = dctZigZag[j];\r\n                                    tableData[z] = binary.readUint16(data, offset);\r\n                                    offset += 2;\r\n                                }\r\n                            } else {\r\n                                throw new JpegError('DQT - invalid table spec');\r\n                            }\r\n                            quantizationTables[quantizationTableSpec & 15] = tableData;\r\n                        }\r\n                        break;\r\n                    case 65472:\r\n                    case 65473:\r\n                    case 65474:\r\n                        if (frame) {\r\n                            throw new JpegError('Only single frame JPEGs supported');\r\n                        }\r\n                        offset += 2;\r\n                        frame = {};\r\n                        frame.extended = fileMarker === 65473;\r\n                        frame.progressive = fileMarker === 65474;\r\n                        frame.precision = data[offset++];\r\n                        const sofScanLines = binary.readUint16(data, offset);\r\n                        offset += 2;\r\n                        frame.scanLines = dnlScanLines || sofScanLines;\r\n                        frame.samplesPerLine = binary.readUint16(data, offset);\r\n                        offset += 2;\r\n                        frame.components = [];\r\n                        frame.componentIds = {};\r\n                        var componentsCount = data[offset++], componentId;\r\n                        var maxH = 0, maxV = 0;\r\n                        for (i = 0; i < componentsCount; i++) {\r\n                            componentId = data[offset];\r\n                            var h = data[offset + 1] >> 4;\r\n                            var v = data[offset + 1] & 15;\r\n                            if (maxH < h) {\r\n                                maxH = h;\r\n                            }\r\n                            if (maxV < v) {\r\n                                maxV = v;\r\n                            }\r\n                            var qId = data[offset + 2];\r\n                            l = frame.components.push({\r\n                                h,\r\n                                v,\r\n                                quantizationId: qId,\r\n                                quantizationTable: null\r\n                            });\r\n                            frame.componentIds[componentId] = l - 1;\r\n                            offset += 3;\r\n                        }\r\n                        frame.maxH = maxH;\r\n                        frame.maxV = maxV;\r\n                        prepareComponents(frame);\r\n                        break;\r\n                    case 65476:\r\n                        const huffmanLength = binary.readUint16(data, offset);\r\n                        offset += 2;\r\n                        for (i = 2; i < huffmanLength;) {\r\n                            var huffmanTableSpec = data[offset++];\r\n                            var codeLengths = new Uint8Array(16);\r\n                            var codeLengthSum = 0;\r\n                            for (j = 0; j < 16; j++, offset++) {\r\n                                codeLengthSum += codeLengths[j] = data[offset];\r\n                            }\r\n                            var huffmanValues = new Uint8Array(codeLengthSum);\r\n                            for (j = 0; j < codeLengthSum; j++, offset++) {\r\n                                huffmanValues[j] = data[offset];\r\n                            }\r\n                            i += 17 + codeLengthSum;\r\n                            (huffmanTableSpec >> 4 === 0 ? huffmanTablesDC : huffmanTablesAC)[huffmanTableSpec & 15] = buildHuffmanTable(codeLengths, huffmanValues);\r\n                        }\r\n                        break;\r\n                    case 65501:\r\n                        offset += 2;\r\n                        resetInterval = binary.readUint16(data, offset);\r\n                        offset += 2;\r\n                        break;\r\n                    case 65498:\r\n                        const parseDNLMarker = ++numSOSMarkers === 1 && !dnlScanLines;\r\n                        offset += 2;\r\n                        var selectorsCount = data[offset++];\r\n                        var components = [], component;\r\n                        for (i = 0; i < selectorsCount; i++) {\r\n                            const index = data[offset++];\r\n                            var componentIndex = frame.componentIds[index];\r\n                            component = frame.components[componentIndex];\r\n                            component.index = index;\r\n                            var tableSpec = data[offset++];\r\n                            component.huffmanTableDC = huffmanTablesDC[tableSpec >> 4];\r\n                            component.huffmanTableAC = huffmanTablesAC[tableSpec & 15];\r\n                            components.push(component);\r\n                        }\r\n                        var spectralStart = data[offset++];\r\n                        var spectralEnd = data[offset++];\r\n                        var successiveApproximation = data[offset++];\r\n                        try {\r\n                            var processed = decodeScan(data, offset, frame, components, resetInterval, spectralStart, spectralEnd, successiveApproximation >> 4, successiveApproximation & 15, parseDNLMarker);\r\n                            offset += processed;\r\n                        } catch (ex) {\r\n                            if (ex instanceof DNLMarkerError) {\r\n                                sutil.warn(`${ ex.message } -- attempting to re-parse the JPEG image.`);\r\n                                return this.parse(data, { dnlScanLines: ex.scanLines });\r\n                            } else if (ex instanceof EOIMarkerError) {\r\n                                sutil.warn(`${ ex.message } -- ignoring the rest of the image data.`);\r\n                                break markerLoop;\r\n                            }\r\n                            throw ex;\r\n                        }\r\n                        break;\r\n                    case 65500:\r\n                        offset += 4;\r\n                        break;\r\n                    case 65535:\r\n                        if (data[offset] !== 255) {\r\n                            offset--;\r\n                        }\r\n                        break;\r\n                    default:\r\n                        const nextFileMarker = findNextFileMarker(data, offset - 2, offset - 3);\r\n                        if (nextFileMarker && nextFileMarker.invalid) {\r\n                            sutil.warn('JpegImage.parse - unexpected data, current marker is: ' + nextFileMarker.invalid);\r\n                            offset = nextFileMarker.offset;\r\n                            break;\r\n                        }\r\n                        if (!nextFileMarker || offset >= data.length - 1) {\r\n                            sutil.warn('JpegImage.parse - reached the end of the image data ' + 'without finding an EOI marker (0xFFD9).');\r\n                            break markerLoop;\r\n                        }\r\n                        throw new JpegError('JpegImage.parse - unknown marker: ' + fileMarker.toString(16));\r\n                    }\r\n                    fileMarker = binary.readUint16(data, offset);\r\n                    offset += 2;\r\n                }\r\n            this.width = frame.samplesPerLine;\r\n            this.height = frame.scanLines;\r\n            this.jfif = jfif;\r\n            this.adobe = adobe;\r\n            this.components = [];\r\n            for (i = 0; i < frame.components.length; i++) {\r\n                component = frame.components[i];\r\n                var quantizationTable = quantizationTables[component.quantizationId];\r\n                if (quantizationTable) {\r\n                    component.quantizationTable = quantizationTable;\r\n                }\r\n                this.components.push({\r\n                    index: component.index,\r\n                    output: buildComponentData(frame, component),\r\n                    scaleX: component.h / frame.maxH,\r\n                    scaleY: component.v / frame.maxV,\r\n                    blocksPerLine: component.blocksPerLine,\r\n                    blocksPerColumn: component.blocksPerColumn\r\n                });\r\n            }\r\n            this.numComponents = this.components.length;\r\n            return undefined;\r\n        },\r\n        _getLinearizedBlockData(width, height, isSourcePDF = false) {\r\n            var scaleX = this.width / width, scaleY = this.height / height;\r\n            var component, componentScaleX, componentScaleY, blocksPerScanline;\r\n            var x, y, i, j, k;\r\n            var index;\r\n            var offset = 0;\r\n            var output;\r\n            var numComponents = this.components.length;\r\n            var dataLength = width * height * numComponents;\r\n            var data = new Uint8ClampedArray(dataLength);\r\n            var xScaleBlockOffset = new Uint32Array(width);\r\n            var mask3LSB = 4294967288;\r\n            let lastComponentScaleX;\r\n            for (i = 0; i < numComponents; i++) {\r\n                component = this.components[i];\r\n                componentScaleX = component.scaleX * scaleX;\r\n                componentScaleY = component.scaleY * scaleY;\r\n                offset = i;\r\n                output = component.output;\r\n                blocksPerScanline = component.blocksPerLine + 1 << 3;\r\n                if (componentScaleX !== lastComponentScaleX) {\r\n                    for (x = 0; x < width; x++) {\r\n                        j = 0 | x * componentScaleX;\r\n                        xScaleBlockOffset[x] = (j & mask3LSB) << 3 | j & 7;\r\n                    }\r\n                    lastComponentScaleX = componentScaleX;\r\n                }\r\n                for (y = 0; y < height; y++) {\r\n                    j = 0 | y * componentScaleY;\r\n                    index = blocksPerScanline * (j & mask3LSB) | (j & 7) << 3;\r\n                    for (x = 0; x < width; x++) {\r\n                        data[offset] = output[index + xScaleBlockOffset[x]];\r\n                        offset += numComponents;\r\n                    }\r\n                }\r\n            }\r\n            let transform = this._decodeTransform;\r\n            if (!isSourcePDF && numComponents === 4 && !transform) {\r\n                transform = new Int32Array([\r\n                    -256,\r\n                    255,\r\n                    -256,\r\n                    255,\r\n                    -256,\r\n                    255,\r\n                    -256,\r\n                    255\r\n                ]);\r\n            }\r\n            if (transform) {\r\n                for (i = 0; i < dataLength;) {\r\n                    for (j = 0, k = 0; j < numComponents; j++, i++, k += 2) {\r\n                        data[i] = (data[i] * transform[k] >> 8) + transform[k + 1];\r\n                    }\r\n                }\r\n            }\r\n            return data;\r\n        },\r\n        get _isColorConversionNeeded() {\r\n            if (this.adobe) {\r\n                return !!this.adobe.transformCode;\r\n            }\r\n            if (this.numComponents === 3) {\r\n                if (this._colorTransform === 0) {\r\n                    return false;\r\n                } else if (this.components[0].index === 82 && this.components[1].index === 71 && this.components[2].index === 66) {\r\n                    return false;\r\n                }\r\n                return true;\r\n            }\r\n            if (this._colorTransform === 1) {\r\n                return true;\r\n            }\r\n            return false;\r\n        },\r\n        _convertYccToRgb: function convertYccToRgb(data) {\r\n            var Y, Cb, Cr;\r\n            for (var i = 0, length = data.length; i < length; i += 3) {\r\n                Y = data[i];\r\n                Cb = data[i + 1];\r\n                Cr = data[i + 2];\r\n                data[i] = Y - 179.456 + 1.402 * Cr;\r\n                data[i + 1] = Y + 135.459 - 0.344 * Cb - 0.714 * Cr;\r\n                data[i + 2] = Y - 226.816 + 1.772 * Cb;\r\n            }\r\n            return data;\r\n        },\r\n        _convertYcckToRgb: function convertYcckToRgb(data) {\r\n            var Y, Cb, Cr, k;\r\n            var offset = 0;\r\n            for (var i = 0, length = data.length; i < length; i += 4) {\r\n                Y = data[i];\r\n                Cb = data[i + 1];\r\n                Cr = data[i + 2];\r\n                k = data[i + 3];\r\n                data[offset++] = -122.67195406894 + Cb * (-0.0000660635669420364 * Cb + 0.000437130475926232 * Cr - 0.000054080610064599 * Y + 0.00048449797120281 * k - 0.154362151871126) + Cr * (-0.000957964378445773 * Cr + 0.000817076911346625 * Y - 0.00477271405408747 * k + 1.53380253221734) + Y * (0.000961250184130688 * Y - 0.00266257332283933 * k + 0.48357088451265) + k * (-0.000336197177618394 * k + 0.484791561490776);\r\n                data[offset++] = 107.268039397724 + Cb * (0.0000219927104525741 * Cb - 0.000640992018297945 * Cr + 0.000659397001245577 * Y + 0.000426105652938837 * k - 0.176491792462875) + Cr * (-0.000778269941513683 * Cr + 0.00130872261408275 * Y + 0.000770482631801132 * k - 0.151051492775562) + Y * (0.00126935368114843 * Y - 0.00265090189010898 * k + 0.25802910206845) + k * (-0.000318913117588328 * k - 0.213742400323665);\r\n                data[offset++] = -20.810012546947 + Cb * (-0.000570115196973677 * Cb - 0.0000263409051004589 * Cr + 0.0020741088115012 * Y - 0.00288260236853442 * k + 0.814272968359295) + Cr * (-0.0000153496057440975 * Cr - 0.000132689043961446 * Y + 0.000560833691242812 * k - 0.195152027534049) + Y * (0.00174418132927582 * Y - 0.00255243321439347 * k + 0.116935020465145) + k * (-0.000343531996510555 * k + 0.24165260232407);\r\n            }\r\n            return data.subarray(0, offset);\r\n        },\r\n        _convertYcckToCmyk: function convertYcckToCmyk(data) {\r\n            var Y, Cb, Cr;\r\n            for (var i = 0, length = data.length; i < length; i += 4) {\r\n                Y = data[i];\r\n                Cb = data[i + 1];\r\n                Cr = data[i + 2];\r\n                data[i] = 434.456 - Y - 1.402 * Cr;\r\n                data[i + 1] = 119.541 - Y + 0.344 * Cb + 0.714 * Cr;\r\n                data[i + 2] = 481.816 - Y - 1.772 * Cb;\r\n            }\r\n            return data;\r\n        },\r\n        _convertCmykToRgb: function convertCmykToRgb(data) {\r\n            var c, m, y, k;\r\n            var offset = 0;\r\n            for (var i = 0, length = data.length; i < length; i += 4) {\r\n                c = data[i];\r\n                m = data[i + 1];\r\n                y = data[i + 2];\r\n                k = data[i + 3];\r\n                data[offset++] = 255 + c * (-0.00006747147073602441 * c + 0.0008379262121013727 * m + 0.0002894718188643294 * y + 0.003264231057537806 * k - 1.1185611867203937) + m * (0.000026374107616089405 * m - 0.00008626949158638572 * y - 0.0002748769067499491 * k - 0.02155688794978967) + y * (-0.00003878099212869363 * y - 0.0003267808279485286 * k + 0.0686742238595345) - k * (0.0003361971776183937 * k + 0.7430659151342254);\r\n                data[offset++] = 255 + c * (0.00013596372813588848 * c + 0.000924537132573585 * m + 0.00010567359618683593 * y + 0.0004791864687436512 * k - 0.3109689587515875) + m * (-0.00023545346108370344 * m + 0.0002702845253534714 * y + 0.0020200308977307156 * k - 0.7488052167015494) + y * (0.00006834815998235662 * y + 0.00015168452363460973 * k - 0.09751927774728933) - k * (0.0003189131175883281 * k + 0.7364883807733168);\r\n                data[offset++] = 255 + c * (0.000013598650411385307 * c + 0.00012423956175490851 * m + 0.0004751985097583589 * y - 0.0000036729317476630422 * k - 0.05562186980264034) + m * (0.00016141380598724676 * m + 0.0009692239130725186 * y + 0.0007782692450036253 * k - 0.44015232367526463) + y * (5.068882914068769e-7 * y + 0.0017778369011375071 * k - 0.7591454649749609) - k * (0.0003435319965105553 * k + 0.7063770186160144);\r\n            }\r\n            return data.subarray(0, offset);\r\n        },\r\n        getData({width, height, forceRGB = false, isSourcePDF = false}) {\r\n            if (typeof PDFJSDev === 'undefined' || PDFJSDev.test('!PRODUCTION || TESTING')) {\r\n                sutil.assert(isSourcePDF === true, 'JpegImage.getData: Unexpected \"isSourcePDF\" value for PDF files.');\r\n            }\r\n            if (this.numComponents > 4) {\r\n                throw new JpegError('Unsupported color mode');\r\n            }\r\n            var data = this._getLinearizedBlockData(width, height, isSourcePDF);\r\n            if (this.numComponents === 1 && forceRGB) {\r\n                var dataLength = data.length;\r\n                var rgbData = new Uint8ClampedArray(dataLength * 3);\r\n                var offset = 0;\r\n                for (var i = 0; i < dataLength; i++) {\r\n                    var grayColor = data[i];\r\n                    rgbData[offset++] = grayColor;\r\n                    rgbData[offset++] = grayColor;\r\n                    rgbData[offset++] = grayColor;\r\n                }\r\n                return rgbData;\r\n            } else if (this.numComponents === 3 && this._isColorConversionNeeded) {\r\n                return this._convertYccToRgb(data);\r\n            } else if (this.numComponents === 4) {\r\n                if (this._isColorConversionNeeded) {\r\n                    if (forceRGB) {\r\n                        return this._convertYcckToRgb(data);\r\n                    }\r\n                    return this._convertYcckToCmyk(data);\r\n                } else if (forceRGB) {\r\n                    return this._convertCmykToRgb(data);\r\n                }\r\n            }\r\n            return data;\r\n        }\r\n    };\r\n\r\n    return jpeg.JpegImage = JpegImage;\r\n\r\n});"]}