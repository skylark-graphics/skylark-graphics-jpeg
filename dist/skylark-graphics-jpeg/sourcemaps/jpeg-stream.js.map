{"version":3,"sources":["jpeg-stream.js"],"names":["define","shadow","DecodeStream","sutil","jpeg","JpegImage","JpegStream","stream","maybeLength","dict","params","ch","getByte","skip","this","call","prototype","Object","create","defineProperty","get","getBytes","configurable","ensureBuffer","requested","readBlock","eof","jpegOptions","decodeTransform","undefined","colorTransform","decodeArr","getArray","forceRGB","Array","isArray","bitsPerComponent","decodeArrLength","length","transform","Int32Array","transformNeeded","maxValue","i","Number","isInteger","jpegImage","parse","bytes","data","getData","width","drawWidth","height","drawHeight","isSourcePDF","buffer","bufferLength"],"mappings":";;;;;;;AAAAA,QACI,+BACA,mCACA,wBACA,SACA,gBACD,SAAUC,EAAOC,EAAcC,EAAMC,EAAKC,GACzC,aAEA,SAASC,EAAWC,EAAQC,EAAaC,EAAMC,GAC3C,IAAIC,EACJ,MAAoC,KAA5BA,EAAKJ,EAAOK,YAChB,GAAW,MAAPD,EAAY,CACZJ,EAAOM,MAAM,GACb,MAGRC,KAAKP,OAASA,EACdO,KAAKN,YAAcA,EACnBM,KAAKL,KAAOA,EACZK,KAAKJ,OAASA,EACdR,EAAaa,KAAKD,KAAMN,GAgE5B,OA7DAF,EAAWU,UAAYC,OAAOC,OAAOhB,EAAac,WAElDC,OAAOE,eAAeb,EAAWU,UAAW,SACxCI,IAAK,WACD,OAAOnB,EAAOa,KAAM,QAASA,KAAKP,OAAOc,SAASP,KAAKN,eAE3Dc,cAAc,IAGlBhB,EAAWU,UAAUO,aAAe,SAAUC,KAG9ClB,EAAWU,UAAUS,UAAY,WAC7B,GAAIX,KAAKY,IACL,OAEJ,MAAMC,GACFC,qBAAiBC,EACjBC,oBAAgBD,GAEdE,EAAYjB,KAAKL,KAAKuB,SAAS,SAAU,KAC/C,GAAIlB,KAAKmB,UAAYC,MAAMC,QAAQJ,GAAY,CAC3C,MAAMK,EAAmBtB,KAAKL,KAAKW,IAAI,qBAAuB,EACxDiB,EAAkBN,EAAUO,OAC5BC,EAAY,IAAIC,WAAWH,GACjC,IAAII,GAAkB,EACtB,MAAMC,GAAY,GAAKN,GAAoB,EAC3C,IAAK,IAAIO,EAAI,EAAGA,EAAIN,EAAiBM,GAAK,EACtCJ,EAAUI,GAAyC,KAAnCZ,EAAUY,EAAI,GAAKZ,EAAUY,IAAY,EACzDJ,EAAUI,EAAI,GAAKZ,EAAUY,GAAKD,EAAW,EACxB,MAAjBH,EAAUI,IAAmC,IAArBJ,EAAUI,EAAI,KACtCF,GAAkB,GAGtBA,IACAd,EAAYC,gBAAkBW,GAOtC,GAAIzB,KAAKJ,QAAUI,KAAKJ,OAAOU,IAAK,CAChC,MAAMU,EAAiBhB,KAAKJ,OAAOU,IAAI,kBACnCwB,OAAOC,UAAUf,KACjBH,EAAYG,eAAiBA,GAGrC,MAAMgB,EAAY,IAAIzC,EAAUsB,GAChCmB,EAAUC,MAAMjC,KAAKkC,OACrB,MAAMC,EAAOH,EAAUI,SACnBC,MAAOrC,KAAKsC,UACZC,OAAQvC,KAAKwC,WACbrB,SAAUnB,KAAKmB,SACfsB,aAAa,IAEjBzC,KAAK0C,OAASP,EACdnC,KAAK2C,aAAeR,EAAKX,OACzBxB,KAAKY,KAAM,GAGRtB,EAAKE,WAAaA","file":"../jpeg-stream.js","sourcesContent":["define([\r\n    'skylark-langx-objects/shadow',\r\n    'skylark-io-streams/decode-stream',\r\n    \"skylark-langx-logging\",\r\n    \"./jpeg\",\r\n    './jpeg-image'\r\n], function (shadow,DecodeStream, sutil,jpeg,JpegImage) {\r\n    'use strict';\r\n\r\n    function JpegStream(stream, maybeLength, dict, params) {\r\n        let ch;\r\n        while ((ch = stream.getByte()) !== -1) {\r\n            if (ch === 255) {\r\n                stream.skip(-1);\r\n                break;\r\n            }\r\n        }\r\n        this.stream = stream;\r\n        this.maybeLength = maybeLength;\r\n        this.dict = dict;\r\n        this.params = params;\r\n        DecodeStream.call(this, maybeLength);\r\n    }\r\n\r\n    JpegStream.prototype = Object.create(DecodeStream.prototype);\r\n\r\n    Object.defineProperty(JpegStream.prototype, 'bytes', {\r\n        get: function JpegStream_bytes() {\r\n            return shadow(this, 'bytes', this.stream.getBytes(this.maybeLength));\r\n        },\r\n        configurable: true\r\n    });\r\n\r\n    JpegStream.prototype.ensureBuffer = function (requested) {\r\n    };\r\n\r\n    JpegStream.prototype.readBlock = function () {\r\n        if (this.eof) {\r\n            return;\r\n        }\r\n        const jpegOptions = {\r\n            decodeTransform: undefined,\r\n            colorTransform: undefined\r\n        };\r\n        const decodeArr = this.dict.getArray('Decode', 'D');\r\n        if (this.forceRGB && Array.isArray(decodeArr)) {\r\n            const bitsPerComponent = this.dict.get('BitsPerComponent') || 8;\r\n            const decodeArrLength = decodeArr.length;\r\n            const transform = new Int32Array(decodeArrLength);\r\n            let transformNeeded = false;\r\n            const maxValue = (1 << bitsPerComponent) - 1;\r\n            for (let i = 0; i < decodeArrLength; i += 2) {\r\n                transform[i] = (decodeArr[i + 1] - decodeArr[i]) * 256 | 0;\r\n                transform[i + 1] = decodeArr[i] * maxValue | 0;\r\n                if (transform[i] !== 256 || transform[i + 1] !== 0) {\r\n                    transformNeeded = true;\r\n                }\r\n            }\r\n            if (transformNeeded) {\r\n                jpegOptions.decodeTransform = transform;\r\n            }\r\n        }\r\n\r\n        //modified by lwf\r\n        //ToDo \r\n        ///if (primitives.isDict(this.params)) {\r\n        if (this.params && this.params.get) {\r\n            const colorTransform = this.params.get('ColorTransform');\r\n            if (Number.isInteger(colorTransform)) {\r\n                jpegOptions.colorTransform = colorTransform;\r\n            }\r\n        }\r\n        const jpegImage = new JpegImage(jpegOptions);\r\n        jpegImage.parse(this.bytes);\r\n        const data = jpegImage.getData({\r\n            width: this.drawWidth,\r\n            height: this.drawHeight,\r\n            forceRGB: this.forceRGB,\r\n            isSourcePDF: true\r\n        });\r\n        this.buffer = data;\r\n        this.bufferLength = data.length;\r\n        this.eof = true;\r\n    };\r\n\r\n    return jpeg.JpegStream = JpegStream;\r\n\r\n});"]}